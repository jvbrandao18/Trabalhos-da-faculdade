--Jo√£o Vitor Brand√£o
--BCC - 16/08/2022
--Programa√ß√£o Funcional - Frank Coelho de Alcantara

{-1. Escreva uma fun√ß√£o chamada soma1 que recebe um inteiro como argumento e retorna um inteiro uma unidade maior que a entrada.-}
soma1 :: Int -> Int
soma1 x = x + 1


{-2. Escreva uma fun√ß√£o chamada sempre que, n√£o importando o valor de entrada, devolva
sempre zero. Observe que neste caso a entrada pode ser de qualquer tipo.-}
sempre :: any -> Int
sempre x = 0


{-3. Escreva uma fun√ß√£o chamada treco que receba tr√™s valores em ponto flutuantes com
precis√£o dupla e retorne o resultado da soma dos dois primeiros multiplicado pelo terceiro.-}
treco :: Double -> Double -> Double -> Double
treco x y z = (x + y) * z


{-4. Escreva uma fun√ß√£o chamada resto que devolva o resto de uma divis√£o entre dois n√∫meros
inteiros.-}
resto :: Int -> Int -> Int
resto x y = x `mod` y


{-5. Escreva uma fun√ß√£o chamada precoMaior que devolva o maior valor entre quatro valores monet√°rios.-}
precoMaior :: Float -> Float -> Float -> Float -> Float
precoMaior a b c d = maximum [a, b, c, d]


{-6. Escreva uma fun√ß√£o chamada impar que devolva True, sempre que o resultado do produto de dois n√∫meros inteiros for √≠mpar.-} 
impar :: (Int, Int) -> Bool
impar (x, y) = ((x * y) `mod` 2) == 1


{-7. Em Haskell existe o tipo par cuja assinatura tem a seguinte forma: ùëùùëéùëü ‚à∑ (ùêºùëõùë°,ùêºùëõùë°). Escreva
uma fun√ß√£o em Haskell que devolva a soma dos componentes de um par de inteiros.-}
par :: (Int, Int) -> Int
par (x, y) = x + y


{-8. Escreva uma fun√ß√£o em Haskell que receba n√∫meros reais (double) e devolva o resultado
da equa√ß√£o ùë•2 + ùë¶/2 + ùëß.-}
q8 :: Double -> Double -> Double -> Double
q8 x y z = x**2 + y/2 + z


{-9. Escreva uma fun√ß√£o em Haskell chamada diagnostico que receba o peso do aluno e imprima
um diagn√≥stico de obesidade, segundo a tabela que pode ser encontrada no link:
Sobrepeso, obesidade e obesidade m√≥rbida: entenda a diferen√ßa entre os tr√™s termos
(cuidadospelavida.com.br). Observe que este diagn√≥stico √© meramente estat√≠stico e n√£o
tem nenhum valor real, est√° sendo usado nesta quest√£o apenas para a defini√ß√£o das faixas.
Todo e qualquer diagn√≥stico deve ser feito por um profissional m√©dico.-}
diagnostico :: Double -> String
diagnostico x
  |x < 17 = "Muito abaixo do peso"
  |x < 18.5 = "Peso normal"
  |x < 30 = "Sobrepeso" 
  |x < 35 = "Obesidade leve" 
  |x < 40 = "Obesidade severa"
  |otherwise = "Obesidade morbida"


{-10. Escreva uma fun√ß√£o em Haskell chamada bissexto que receba um ano e devolva True se o
ano for bisexto sabendo que anos bissextos obedecem a seguinte regra:
ùëáùëúùëëùëúùë† ùëúùë† ùëéùëõùëúùë† ùëûùë¢ùëí ùë†ùëíùëóùëéùëö ùëëùëñùë£ùëñùë†√≠ùë£ùëíùëñùë† ùëùùëúùëü 4
ùê∏ùë•ùëêùëíùë°ùëú ùëúùë† ùëéùëõùëúùë† ùëûùë¢ùëí ùë†√£ùëú ùëö√∫ùëôùë°ùëñùëùùëôùëúùë† ùëëùëí 100
ùê∏ùë•ùëêùëíùë°ùëú ùëúùë† ùëéùëõùëúùë† ùëûùë¢ùëí ùë†√£ùëú ùëö√∫ùëôùë°ùëñùëùùëôùëúùë† ùëëùëí 400
1997 n√£o √© bissexto, 1900 n√£o √© bissexto e 2000 √© bissexto.-}
bissexto :: Int -> Bool
bissexto x = ((x `mod` 4 == 0 && x `mod` 100 /= 0) || x`mod`400 == 0)


--Chamada das fun√ß√µes:
main = do
--Quest√£o 1:
  print ("soma1: entrada: 4; resultado: " ++ show (soma1 4))
  print ("soma1: entrada: -2; resultado: " ++ show (soma1 (-2)))
--Quest√£o 2:
  print ("sempre: entrada: 10.5; resultado: " ++ show (sempre 10.5))
  print ("sempre: entrada: -10; resultado: " ++ show (sempre (-10)))
--Quest√£o 3:
  print ("treco: entrada: 10 5 2; resultado: " ++ show (treco 10 5 2))
--Quest√£o 4:
  print ("resto: entrada: 10 3; resultado: 1 " ++ show (resto 10 3))
  print ("resto: entrada: -10 3; resultado: 2 " ++ show (resto (-10) 3))
--Quest√£o 5: 
  print ("precoMaior: entrada: 1 3 10 9; resultado: " ++ show (precoMaior 1 3 10 9))
  print ("precoMaior: entrada: -10 6 3 9; resultado: " ++ show (precoMaior (-10) 6 3 9))
--Quest√£o 6:
  print ("impar: entrada: 1 3; resultado: " ++ show( impar (1,3)))
  print ("impar: entrada: 1 2; resultado: " ++ show( impar (1,2)))
--Quest√£o 7:
  print ("par: entrada: 2 4; resultado: " ++ show( par (2,4)))
  print ("par: entrada: 5 7; resultado: " ++ show( par (5,7)))
--Quest√£o 8:
  print ("q8: entrada: 10 8 5; resultado: " ++ show (q8 10 8(5)))
-- Quest√£o 9:
  print ("diagnostico: entrada: < 17; resultado: " ++ show( diagnostico (15)))
  print ("diagnostico: entrada: < 18.5; resultado: " ++ show( diagnostico (18)))
  print ("diagnostico: entrada: < 30; resultado: " ++ show( diagnostico (20)))
  print ("diagnostico: entrada: < 35; resultado: " ++ show( diagnostico (34)))
  print ("diagnostico: entrada: < 40; resultado: " ++ show( diagnostico (39)))
  print ("diagnostico: entrada: > 41; resultado: " ++ show( diagnostico (77)))
-- Quest√£o 10:
--1997 n√£o √© bissexto, 1900 n√£o √© bissexto e 2000 √© bissexto.-}
  print ("bissexto: entrada: 1900; resultado: " ++ show (bissexto 1900))
  print ("bissexto: entrada: 1997; resultado: " ++ show (bissexto 1997))
  print ("bissexto: entrada: 2000; resultado: " ++ show (bissexto 2000))
